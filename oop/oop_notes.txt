oop notes

জাভাস্ক্রিপ্টে অবজেক্ট-ওরিয়েন্টেড প্রোগ্রামিং (OOP): কোডকে বাস্তবের মত করে গড়ে তোলা
তুমি একজন আর্কিটেক্ট, এবং তোমাকে একটি আধুনিক আবাসিক কমপ্লেক্স ডিজাইন করতে বলা হয়েছে। তুমি কি প্রতিটি অ্যাপার্টমেন্টের জন্য আলাদা করে প্রতিটি জানালা, প্রতিটি দরজা, প্রতিটি দেয়াল নতুন করে আঁকবে? না! তুমি একটি ব্লুপ্রিন্ট তৈরি করবে একটি আদর্শ অ্যাপার্টমেন্টের জন্য। এই ব্লুপ্রিন্টে থাকবে অ্যাপার্টমেন্টে কী কী থাকবে (বৈশিষ্ট্য - যেমন বেডরুমের সংখ্যা, বাথরুমের সংখ্যা) এবং সেখানে কী কী করা যাবে (কর্মক্ষমতা - যেমন দরজা খোলা/বন্ধ করা, আলো জ্বালানো/নেভানো)। একবার এই ব্লুপ্রিন্ট তৈরি হয়ে গেলে, তুমি সেই ব্লুপ্রিন্ট ব্যবহার করে যত খুশি অ্যাপার্টমেন্ট তৈরি করতে পারবে, প্রত্যেকেই তাদের নিজস্ব সেট বৈশিষ্ট্য এবং কর্মক্ষমতা নিয়ে।

OOP ঠিক এই ধারণার উপর ভিত্তি করে কাজ করে। এটি হলো একটি প্রোগ্রামিং প্যারাডাইম যা অবজেক্ট ধারণার উপর ভিত্তি করে কোডকে সংগঠিত করে। এটি বাস্তব বিশ্বের সত্তাগুলোকে (entities) মডেল করে, যেখানে প্রতিটি সত্তার নিজস্ব ডেটা (properties) এবং সেই ডেটার উপর কাজ করার জন্য নিজস্ব ফাংশন (methods) থাকে।

জাভাস্ক্রিপ্ট একটি মাল্টি-প্যারাডাইম ল্যাঙ্গুয়েজ। এর মানে হলো, তুমি এতে ফাংশনাল প্রোগ্রামিং, ইম্পেরেটিভ প্রোগ্রামিং এবং অবজেক্ট-ওরিয়েন্টেড প্রোগ্রামিং - সবই করতে পারো। যদিও জাভাস্ক্রিপ্ট প্রোটোটাইপ-ভিত্তিক (prototype-based) OOP ব্যবহার করে, ES6 (ECMAScript 2015) থেকে class কীওয়ার্ড যোগ হওয়ার পর এটি অন্যান্য ক্লাস-ভিত্তিক (class-based) ভাষার মতো দেখতে লাগে, যা OOP কে আরও সহজবোধ্য করেছে।

OOP এর চারটি স্তম্ভ (Four Pillars of OOP)
OOP এর প্রধানত চারটি মূল ধারণা রয়েছে, যা একে শক্তিশালী এবং কার্যকরী করে তোলে:

এনক্যাপসুলেশন (Encapsulation): ডেটা এবং সেই ডেটার উপর কাজ করা ফাংশনগুলোকে একটি একক ইউনিটের (যেমন: একটি ক্লাস বা অবজেক্ট) মধ্যে আবদ্ধ করা। এটি বাইরের কোড থেকে ডেটার সরাসরি অ্যাক্সেসকে নিয়ন্ত্রণ করে, যা ডেটার নিরাপত্তা নিশ্চিত করে।

রূপক: একটি গাড়ির ইঞ্জিন। ইঞ্জিনের ভেতরের জটিল যন্ত্রাংশগুলো তুমি বাইরে থেকে দেখতে পাও না, সেগুলো একটি ধাতব খাপের মধ্যে আবদ্ধ থাকে। তুমি শুধু নির্দিষ্ট ইন্টারফেস (যেমন: ইগনিশন, এক্সিলারেটর) ব্যবহার করে এটিকে নিয়ন্ত্রণ করো। ভেতরের কার্যকারিতা লুকিয়ে রাখা (data hiding) এবং একটি নিয়ন্ত্রিত ইন্টারফেসের মাধ্যমে অ্যাক্সেস দেওয়াটাই এনক্যাপসুলেশন।

অ্যাবস্ট্রাকশন (Abstraction): শুধুমাত্র প্রয়োজনীয় তথ্য প্রকাশ করা এবং অপ্রয়োজনীয় বিশদ গোপন করা। ব্যবহারকারীকে একটি উচ্চ-স্তরের দৃশ্য দেওয়া হয়, যেখানে অভ্যন্তরীণ জটিলতাগুলো আড়াল করা হয়।

রূপক: একটি টিভি রিমোট। তুমি যখন রিমোটের 'ভলিউম আপ' বোতাম চাপো, তখন ভলিউম বাড়ে। ভেতরের সার্কিট কিভাবে কাজ করে বা কোন সিগন্যাল টিভিতে যায়, তা তোমার জানার দরকার নেই। তুমি শুধু জানো যে এই বোতামটি এই কাজটি করে।

ইনহেরিটেন্স (Inheritance): একটি ক্লাসকে (Parent/Base Class) অন্য ক্লাস থেকে (Child/Derived Class) বৈশিষ্ট্য এবং পদ্ধতি উত্তরাধিকার সূত্রে পেতে দেওয়া। এটি কোড পুনরায় ব্যবহার করতে এবং একটি শ্রেণিবদ্ধ সম্পর্ক তৈরি করতে সাহায্য করে।

রূপক: পারিবারিক উত্তরাধিকার। একজন ছেলে তার বাবার কাছ থেকে কিছু বৈশিষ্ট্য (যেমন: চুলের রঙ, চোখের রঙ) এবং কিছু পেশা (যেমন: বাবা যদি ডাক্তার হন, ছেলেও ডাক্তার হতে পারে) উত্তরাধিকার সূত্রে পায়। ছেলের নিজস্ব কিছু নতুন বৈশিষ্ট্যও থাকতে পারে।

পলিমরফিজম (Polymorphism): "অনেক রূপ" এর ক্ষমতা। এটি একই ফাংশন বা মেথডকে বিভিন্ন ধরনের অবজেক্টের জন্য ভিন্ন ভিন্ন আচরণ করতে সক্ষম করে তোলে।

রূপক: একজন ব্যক্তি। একই ব্যক্তি পরিবারের জন্য বাবা/মা, কর্মক্ষেত্রে বস/কর্মী, বন্ধুদের জন্য বন্ধু। একই ব্যক্তি কিন্তু ভিন্ন পরিস্থিতিতে ভিন্ন ভূমিকা পালন করে। OOP তে, একটি মেথডের একই নাম থাকতে পারে, কিন্তু ভিন্ন ক্লাসে এটি ভিন্ন কাজ করতে পারে।

জাভাস্ক্রিপ্টে OOP এর বাস্তবায়ন: class এর মাধ্যমে
ES6 এর class সিনট্যাক্টিক সুগার হলেও, এটি প্রোটোটাইপ-ভিত্তিক ইনহেরিটেন্সকে আরও সহজবোধ্য করে তোলে। চলো আমাদের "আর্কিটেক্ট" রূপকটি ব্যবহার করে class এর মাধ্যমে OOP ধারণাগুলো শিখি।

ক্লাস (Class): ব্লুপ্রিন্ট তৈরি করা
একটি ক্লাস হলো একটি ব্লুপ্রিন্ট বা টেমপ্লেট যা থেকে অবজেক্ট তৈরি হয়। এটি কোনো ডেটা নয়, বরং ডেটা এবং ফাংশনের কাঠামো।

উদাহরণ 1: Apartment ক্লাস তৈরি করা

ধরি, তুমি একটি আবাসিক কমপ্লেক্সের জন্য অ্যাপার্টমেন্টের ব্লুপ্রিন্ট তৈরি করছো।



// Apartment.js - Apartment ক্লাসের ব্লুপ্রিন্ট

class Apartment {
  // constructor: যখন একটি নতুন Apartment অবজেক্ট তৈরি হয়, তখন এটি কল হয়।
  // এটি অবজেক্টের প্রাথমিক বৈশিষ্ট্য (properties) সেট করে।
  constructor(bedrooms, bathrooms, areaSqFt, floor) {
    this.bedrooms = bedrooms;       // বেডরুমের সংখ্যা
    this.bathrooms = bathrooms;     // বাথরুমের সংখ্যা
    this.areaSqFt = areaSqFt;       // আয়তন বর্গফুট
    this.floor = floor;             // ফ্লোর নাম্বার
    this.isOccupied = false;        // প্রাথমিকভাবে খালি থাকে
  }

  // Method: অ্যাপার্টমেন্টের তথ্য প্রদান করে
  getDetails() {
    return `এই অ্যাপার্টমেন্টে ${this.bedrooms}টি বেডরুম, ${this.bathrooms}টি বাথরুম, ${this.areaSqFt} বর্গফুট আয়তন এবং এটি ${this.floor} তলায় অবস্থিত।`;
  }

  // Method: অ্যাপার্টমেন্ট দখল করা (isOccupied স্টেটাস পরিবর্তন)
  occupy() {
    if (!this.isOccupied) {
      this.isOccupied = true;
      console.log(`অ্যাপার্টমেন্টটি এখন দখলকৃত।`);
    } else {
      console.log(`অ্যাপার্টমেন্টটি ইতিমধ্যেই দখলকৃত।`);
    }
  }

  // Method: অ্যাপার্টমেন্ট খালি করা
  vacate() {
    if (this.isOccupied) {
      this.isOccupied = false;
      console.log(`অ্যাপার্টমেন্টটি এখন খালি।`);
    } else {
      console.log(`অ্যাপার্টমেন্টটি ইতিমধ্যেই খালি।`);
    }
  }
}

// export default Apartment; // মডিউল হিসেবে এক্সপোর্ট করতে চাইলে




নোট:

class কীওয়ার্ড: একটি ক্লাস ডিফাইন করতে ব্যবহৃত হয়।

constructor মেথড: এটি একটি বিশেষ মেথড। যখন new কীওয়ার্ড ব্যবহার করে একটি নতুন অবজেক্ট তৈরি হয়, তখন এই মেথডটি স্বয়ংক্রিয়ভাবে কল হয়। এর কাজ হলো নতুন তৈরি হওয়া অবজেক্টের প্রাথমিক প্রোপার্টিগুলো সেট করা।

this কীওয়ার্ড: ক্লাসের ভেতরে this কীওয়ার্ড অবজেক্টের নিজস্ব ইনস্ট্যান্সকে (instance) বোঝায়। this.bedrooms মানে এই নির্দিষ্ট Apartment অবজেক্টের bedrooms প্রোপার্টি।

মেথড: ক্লাসের ভেতরে সংজ্ঞায়িত ফাংশনগুলোকে মেথড বলা হয়।

অবজেক্ট (Object/Instance): ব্লুপ্রিন্ট থেকে বিল্ডিং তৈরি করা
ক্লাস হলো ব্লুপ্রিন্ট। যখন তুমি সেই ব্লুপ্রিন্ট ব্যবহার করে একটি বাস্তব জিনিস তৈরি করো, তখন তাকে একটি অবজেক্ট বা ইনস্ট্যান্স বলে।

উদাহরণ 2: Apartment ক্লাস থেকে অবজেক্ট তৈরি করা

আমাদের Apartment ব্লুপ্রিন্ট থেকে এখন কিছু বাস্তব অ্যাপার্টমেন্ট তৈরি করি।

// অন্য কোনো ফাইল, যেমন main.js

// import Apartment from './Apartment.js'; // যদি মডিউল হিসেবে ইম্পোর্ট করো

const apt101 = new Apartment(2, 1, 900, 1); // 2 বেড, 1 বাথ, 900 বর্গফুট, 1ম তলা
const apt203 = new Apartment(3, 2, 1200, 2); // 3 বেড, 2 বাথ, 1200 বর্গফুট, 2য় তলা
const apt305 = new Apartment(4, 3, 1800, 3); // 4 বেড, 3 বাথ, 1800 বর্গফুট, 3য় তলা

console.log("--- আমাদের অ্যাপার্টমেন্টগুলো ---");
console.log(apt101.getDetails()); // আউটপুট: এই অ্যাপার্টমেন্টে 2টি বেডরুম, 1টি বাথরুম, 900 বর্গফুট আয়তন এবং এটি 1 তলায় অবস্থিত।
console.log(apt203.getDetails()); // আউটপুট: এই অ্যাপার্টমেন্টে 3টি বেডরুম, 2টি বাথরুম, 1200 বর্গফুট আয়তন এবং এটি 2 তলায় অবস্থিত।

console.log("\n--- অ্যাপার্টমেন্টের অবস্থা ---");
console.log(`অ্যাপার্টমেন্ট 101 দখলকৃত? ${apt101.isOccupied}`); // আউটপুট: অ্যাপার্টমেন্ট 101 দখলকৃত? false

apt101.occupy(); // অ্যাপার্টমেন্ট 101 দখল করো
console.log(`অ্যাপার্টমেন্ট 101 দখলকৃত? ${apt101.isOccupied}`); // আউটপুট: অ্যাপার্টমেন্ট 101 দখলকৃত? true

apt203.occupy(); // অ্যাপার্টমেন্ট 203 দখল করো
apt203.occupy(); // আবার দখল করার চেষ্টা

নোট:

new কীওয়ার্ড: একটি ক্লাসের নতুন ইনস্ট্যান্স (অবজেক্ট) তৈরি করতে new কীওয়ার্ড ব্যবহৃত হয়।

প্রতিটি তৈরি হওয়া অবজেক্ট apt101, apt203, apt305 হলো Apartment ক্লাসের একটি স্বতন্ত্র কপি। তাদের প্রত্যেকের নিজস্ব bedrooms, bathrooms, areaSqFt, floor এবং isOccupied প্রোপার্টি আছে, কিন্তু তারা একই getDetails, occupy, vacate মেথড শেয়ার করে।

এনক্যাপসুলেশন (Encapsulation): ডেটা ও মেথডকে একসাথে রাখা
এনক্যাপসুলেশন হলো ডেটা (properties) এবং সেই ডেটার উপর কাজ করার জন্য মেথডগুলোকে একটি একক ইউনিটের (ক্লাসের) মধ্যে আবদ্ধ করা। এটি ডেটাকে সুরক্ষিত রাখে এবং ডেটার অ্যাক্সেস নিয়ন্ত্রণ করে।

উদাহরণ 3: Car ক্লাসে এনক্যাপসুলেশন

ধরো, তুমি একটি গাড়ির ব্লুপ্রিন্ট তৈরি করছো। গাড়ির ইঞ্জিন, চাকা, জ্বালানি - এগুলো তার ভেতরের ডেটা। কিন্তু একজন ব্যবহারকারী কি সরাসরি ইঞ্জিনের ভেতরের পার্টস নিয়ন্ত্রণ করে? না। সে স্টিয়ারিং, এক্সিলারেটর, ব্রেক ব্যবহার করে।
জাভাস্ক্রিপ্ট মডিউলস (ES Modules): import এবং export এর জাদুকরী দুনিয়া!
তুমি একজন মাস্টার হতে চাও, তাই আমি তোমাকে শুধু সিনট্যাক্স শেখাবো না, এর পেছনের কারণ এবং বাস্তব জীবনের উদাহরণ দিয়ে শেখাবো।

মডিউল কী এবং কেন? (Module: What & Why?)
ধরো, তুমি একজন আর্কিটেক্ট এবং তোমার কাজ হলো একটা বিশাল কমপ্লেক্স বিল্ডিং ডিজাইন করা। তুমি কি পুরো বিল্ডিংয়ের ডিজাইন একবারে একটা কাগজের উপর করবে? নিশ্চয়ই না! তুমি রুমের ডিজাইন আলাদা করবে, রান্নাঘরের ডিজাইন আলাদা, বাথরুমের ডিজাইন আলাদা। এরপর এই ছোট ছোট ডিজাইনগুলো একত্র করে একটা সম্পূর্ণ বিল্ডিং তৈরি করবে।

জাভাস্ক্রিপ্টে মডিউলও ঠিক এই ধারণার উপর ভিত্তি করে তৈরি। যখন আমাদের কোডবেস অনেক বড় হয়ে যায়, তখন সব কোড একটা ফাইলের মধ্যে রাখলে তা ম্যানেজ করা অনেক কঠিন হয়ে পড়ে। কোড রিডেবিলিটি কমে যায়, বাগ খুঁজে বের করা কঠিন হয় এবং একই কোড বারবার লিখতে হয়।

মডিউল আমাদের কোডকে ছোট ছোট, স্বাধীন এবং পুনঃব্যবহারযোগ্য অংশে (files) ভাগ করতে সাহায্য করে। প্রতিটি মডিউল একটি নির্দিষ্ট কাজ করে এবং অন্য মডিউল থেকে স্বাধীনভাবে কাজ করতে পারে।

মডিউলের সুবিধা:

মেইনটেইন করা সহজ: ছোট ছোট ফাইলগুলো সহজে মেইনটেইন করা যায়।

রিউজেবিলিটি (Reusability): একবার লেখা কোড অন্য মডিউলে বা প্রজেক্টে ব্যবহার করা যায়।

নেমস্পেস কলোশন রোধ: প্রতিটি মডিউলের নিজস্ব স্কোপ থাকে, তাই ভেরিয়েবল বা ফাংশন নামের সংঘর্ষ (collision) হয় না।

ডিপেনডেন্সি ম্যানেজমেন্ট: কোন মডিউল কার উপর নির্ভরশীল, তা সহজে বোঝা যায়।

পারফরম্যান্স অপটিমাইজেশন: মডিউল লোডিং অপ্টিমাইজ করা যায়।

export : কোডকে সবার জন্য উন্মুক্ত করা
যখন তুমি তোমার মডিউলে লেখা কোনো ভেরিয়েবল, ফাংশন, বা ক্লাসকে অন্য মডিউল থেকে ব্যবহার করতে চাও, তখন তোমাকে তা export করতে হবে। export মানে হলো, "এই জিনিসটা আমার মডিউলের বাইরে থেকে ব্যবহার করা যাবে।"

ধরো, তুমি একটা কারখানার মালিক। তোমার কারখানায় অনেক প্রোডাক্ট তৈরি হয়। তুমি যখন তোমার প্রোডাক্ট বাজারে বিক্রি করতে চাও, তখন তোমাকে সেগুলো 'এক্সপোর্ট' করতে হয়। জাভাস্ক্রিপ্টেও ঠিক একইরকম।

export দুই প্রকার:

নেমড এক্সপোর্ট (Named Export)

ডিফল্ট এক্সপোর্ট (Default Export)

1. নেমড এক্সপোর্ট (Named Export)
নেমড এক্সপোর্ট দিয়ে তুমি এক বা একাধিক আইটেমকে (ভেরিয়েবল, ফাংশন, ক্লাস) তাদের নির্দিষ্ট নাম দিয়ে এক্সপোর্ট করতে পারো। যখন তুমি এই আইটেমগুলো ইম্পোর্ট করবে, তখন তোমাকে ঠিক একই নাম ব্যবহার করতে হবে।

কেন নেমড এক্সপোর্ট?

যখন তোমার মডিউলে একাধিক গুরুত্বপূর্ণ ফাংশন বা ভেরিয়েবল থাকে এবং তুমি চাও যে ব্যবহারকারী তাদের নির্দিষ্ট নাম ধরে ব্যবহার করুক, তখন নেমড এক্সপোর্ট ব্যবহার করবে।

উদাহরণ 1: সাধারণ ভেরিয়েবল ও ফাংশন এক্সপোর্ট

ধরো, তোমার একটা math.js ফাইল আছে। তুমি এই ফাইলে কিছু গাণিতিক ফাংশন এবং কনস্ট্যান্ট তৈরি করেছ।


math.js	
// math.js - গণিত সংক্রান্ত ফাংশন ও কনস্ট্যান্ট

export const PI = 3.14159; // PI নামে একটি কনস্ট্যান্ট এক্সপোর্ট করলাম

export function add(a, b) { // add নামে একটি ফাংশন এক্সপোর্ট করলাম
  return a + b;
}

export function subtract(a, b) { // subtract নামে আরেকটি ফাংশন এক্সপোর্ট করলাম
  return a - b;
}

// চাইলে একবারেও এক্সপোর্ট করা যায়
const multiply = (a, b) => a * b;
const divide = (a, b) => a / b;

export { multiply, divide }; // একাধিক আইটেম একবারে এক্সপোর্ট


নোট:

export কিওয়ার্ডটি যে ভেরিয়েবল, ফাংশন বা ক্লাসের আগে লিখবে, শুধু সেগুলোই এক্সপোর্ট হবে।

তুমি চাইলে একবারে একাধিক আইটেমকে {} ব্র্যাকেটের মধ্যে রেখে এক্সপোর্ট করতে পারো, যেমন export { multiply, divide };।

উদাহরণ 2: রিয়েল লাইফ হিস্টরি - একটি অনলাইন শপিং সাইট

ধরো, তুমি একটি ই-কমার্স ওয়েবসাইটের জন্য কোড লিখছো। তোমার একটি productUtils.js ফাইল আছে, যেখানে পণ্যের দাম গণনা, স্টক চেক করা ইত্যাদি ফাংশন রয়েছে।

productUtils.js:

// productUtils.js - পণ্যের হিসাব সংক্রান্ত ইউটিলিটি ফাংশন

export const TAX_RATE = 0.15; // ট্যাক্স রেট

export function calculateTotalPrice(price, quantity) {
  return (price * quantity) * (1 + TAX_RATE);
}

export function checkStock(productId) {
  // এখানে সার্ভার থেকে স্টক চেক করার লজিক থাকবে
  console.log(`Checking stock for product ID: ${productId}`);
  return Math.random() > 0.5; // ডেমো হিসেবে র্যান্ডম স্টক রিটার্ন করছি
}

// অন্য কোনো ফাংশন যা এক্সপোর্ট করা হচ্ছে না
function getProductDetails(productId) {
    // ...
}


এখানে TAX_RATE, calculateTotalPrice, এবং checkStock - এই তিনটি জিনিস আমরা নেমড এক্সপোর্ট করেছি, কারণ এই প্রতিটি ফাংশন বা কনস্ট্যান্টের নির্দিষ্ট কাজ আছে এবং আমরা চাই যে অন্য মডিউল থেকে এই নামগুলো ব্যবহার করে তাদেরকে অ্যাক্সেস করা হোক। getProductDetails ফাংশনটি এক্সপোর্ট করা হয়নি, তার মানে এটি শুধুমাত্র এই মডিউলের মধ্যেই ব্যবহার করা যাবে।

2. ডিফল্ট এক্সপোর্ট (Default Export)
প্রতিটি মডিউলে তুমি শুধুমাত্র একটি ডিফল্ট এক্সপোর্ট রাখতে পারো। ডিফল্ট এক্সপোর্টকে তুমি মডিউলের "মেইন জিনিস" হিসেবে ভাবতে পারো। যখন তুমি কোনো মডিউল থেকে ডিফল্ট এক্সপোর্ট ইম্পোর্ট করো, তখন তুমি যেকোনো নাম দিয়ে তাকে ইম্পোর্ট করতে পারো।

কেন ডিফল্ট এক্সপোর্ট?

যখন তোমার মডিউলের প্রধান উদ্দেশ্য একটি মাত্র জিনিস (যেমন একটি ক্লাস, একটি অবজেক্ট, বা একটি ফাংশন) এক্সপোর্ট করা, তখন ডিফল্ট এক্সপোর্ট ব্যবহার করা হয়। এটি মডিউলের প্রধান কার্যকারিতা নির্দেশ করে।

উদাহরণ 1: সাধারণ ডিফল্ট এক্সপোর্ট

calculator.js:

JavaScript

// calculator.js - একটি সাধারণ ক্যালকুলেটর অবজেক্ট

const calculator = {
  add: (a, b) => a + b,
  subtract: (a, b) => a - b,
  multiply: (a, b) => a * b,
  divide: (a, b) => a / b
};

export default calculator; // calculator অবজেক্টটিকে ডিফল্ট এক্সপোর্ট করলাম
নোট:

export default এর পরে সরাসরি ভেরিয়েবল, ফাংশন বা ক্লাস লিখতে পারো।

ডিফল্ট এক্সপোর্টের কোনো নাম থাকে না। অন্য মডিউলে ইম্পোর্ট করার সময় তুমি যেকোনো নাম দিতে পারবে।

উদাহরণ 2: রিয়েল লাইফ হিস্টরি - একটি ইউজার ম্যানেজমেন্ট সিস্টেম

ধরো, তুমি একটি ইউজার ম্যানেজমেন্ট সিস্টেমের জন্য একটি মডিউল তৈরি করছো। এই মডিউলের প্রধান কাজ হলো ব্যবহারকারীদের ডেটা পরিচালনা করা। তুমি একটি ক্লাস তৈরি করেছ UserAPI নামে, যা সমস্ত ইউজার-সম্পর্কিত কাজ পরিচালনা করে।

UserAPI.js:

JavaScript

// UserAPI.js - ব্যবহারকারীদের ডেটা পরিচালনা করার জন্য ক্লাস

class UserAPI {
  constructor() {
    this.users = []; // ডেমো হিসেবে একটি ইউজার অ্যারে
  }

  addUser(name, email) {
    const newUser = { id: this.users.length + 1, name, email };
    this.users.push(newUser);
    console.log(`User ${name} added.`);
    return newUser;
  }

  getUser(id) {
    return this.users.find(user => user.id === id);
  }

  getAllUsers() {
    return [...this.users]; // অ্যারের কপি রিটার্ন করছি
  }

  deleteUser(id) {
    const initialLength = this.users.length;
    this.users = this.users.filter(user => user.id !== id);
    return this.users.length < initialLength;
  }
}

export default UserAPI; // UserAPI ক্লাসটি ডিফল্ট এক্সপোর্ট করলাম
এখানে UserAPI ক্লাসটি এই মডিউলের মূল কাজকে প্রতিনিধিত্ব করে, তাই এটিকে ডিফল্ট এক্সপোর্ট করা হয়েছে।

import : অন্য মডিউলের কোডকে ব্যবহার করা
যখন তুমি অন্য কোনো মডিউল থেকে এক্সপোর্ট করা কোড ব্যবহার করতে চাও, তখন তোমাকে তা import করতে হবে। import মানে হলো, "আমি অন্য একটি ফাইল থেকে কিছু কোড ব্যবহার করতে চাই।"

তোমার কারখানার উদাহরণে ফিরে আসি। তুমি যখন বাজারে যাওয়া প্রোডাক্টগুলো কিনে নিয়ে আসো, তখন তুমি সেগুলো 'ইম্পোর্ট' করছো। জাভাস্ক্রিপ্টেও ঠিক একইরকম।

import করার পদ্ধতি নির্ভর করে তুমি কিভাবে এক্সপোর্ট করেছো তার উপর।

1. নেমড ইম্পোর্ট (Named Import)
নেমড এক্সপোর্ট করা আইটেমগুলোকে ইম্পোর্ট করার জন্য তোমাকে তাদের আসল নাম ব্যবহার করতে হবে এবং {} ব্র্যাকেটের মধ্যে রাখতে হবে।

উদাহরণ 1: math.js থেকে ইম্পোর্ট

মনে আছে আমাদের math.js ফাইলটি? চলো এবার সেখান থেকে ফাংশনগুলো ইম্পোর্ট করি।

app.js (বা তোমার মেইন ফাইল):

JavaScript

// app.js - math.js থেকে ফাংশন ইম্পোর্ট করে ব্যবহার করা

import { PI, add, subtract, multiply } from './math.js'; // নির্দিষ্ট নাম দিয়ে ইম্পোর্ট করলাম

console.log("Value of PI:", PI); // আউটপুট: Value of PI: 3.14159

const sum = add(10, 5);
console.log("Sum:", sum); // আউটপুট: Sum: 15

const diff = subtract(10, 5);
console.log("Difference:", diff); // আউটপুট: Difference: 5

const product = multiply(4, 3);
console.log("Product:", product); // আউটপুট: Product: 12
নোট:

from './math.js' - এখানে './math.js' হলো মডিউলের পাথ। যদি একই ডিরেক্টরিতে থাকে তাহলে ./ দিয়ে শুরু হবে। যদি অন্য ফোল্ডারে থাকে, তাহলে সঠিক পাথ দিতে হবে।

.js এক্সটেনশনটি Node.js এ ঐচ্ছিক হলেও ব্রাউজারে সাধারণত দিতে হয়। আধুনিক ডেভেলপমেন্ট এনভায়রনমেন্টে বিল্ড টুল ব্যবহার করলে এটি স্বয়ংক্রিয়ভাবে হ্যান্ডেল হয়।

উদাহরণ 2: রিয়েল লাইফ হিস্টরি - অনলাইন শপিং সাইটের productUtils.js থেকে ইম্পোর্ট

এবার আমাদের ই-কমার্স সাইটের productUtils.js থেকে ফাংশনগুলো ইম্পোর্ট করে দেখি।

cart.js (কার্ট ম্যানেজমেন্টের জন্য ফাইল):

JavaScript

// cart.js - productUtils থেকে ফাংশন ইম্পোর্ট করে কার্ট ম্যানেজ করা

import { calculateTotalPrice, checkStock, TAX_RATE } from './productUtils.js';

const itemPrice = 100;
const itemQuantity = 2;

const totalPayable = calculateTotalPrice(itemPrice, itemQuantity);
console.log(`Total payable amount (including tax ${TAX_RATE * 100}%): $${totalPayable.toFixed(2)}`);
// আউটপুট: Total payable amount (including tax 15%): $230.00 (উদাহরণস্বরূপ)

const productIdToCheck = 'P12345';
if (checkStock(productIdToCheck)) {
  console.log(`Product ${productIdToCheck} is in stock!`);
} else {
  console.log(`Sorry, product ${productIdToCheck} is out of stock.`);
}
এখানে আমরা calculateTotalPrice, checkStock, এবং TAX_RATE - এই তিনটি নেমড এক্সপোর্টকে productUtils.js থেকে ইম্পোর্ট করে ব্যবহার করছি।

নেমড ইম্পোর্টে নাম পরিবর্তন (Aliasing Named Imports):

অনেক সময় এমন হতে পারে যে, তুমি যে নাম দিয়ে এক্সপোর্ট করেছ, সেই নামটি তোমার বর্তমান মডিউলের কোনো ভেরিয়েবলের সাথে সংঘর্ষ (conflict) করছে, অথবা তুমি আরও ছোট বা অর্থপূর্ণ নাম দিতে চাও। সেক্ষেত্রে তুমি as কিওয়ার্ড ব্যবহার করে নাম পরিবর্তন করতে পারো।

উদাহরণ:

JavaScript

import { add as sumNumbers, subtract } from './math.js';

const result = sumNumbers(7, 3); // add ফাংশন এখন sumNumbers নামে ব্যবহার হচ্ছে
console.log("Sum using alias:", result); // আউটপুট: Sum using alias: 10
2. ডিফল্ট ইম্পোর্ট (Default Import)
ডিফল্ট এক্সপোর্ট করা আইটেমকে ইম্পোর্ট করার জন্য তুমি {} ব্র্যাকেট ব্যবহার করবে না। তুমি যেকোনো নাম দিয়ে তাকে ইম্পোর্ট করতে পারো।

উদাহরণ 1: calculator.js থেকে ইম্পোর্ট

আমাদের calculator.js ফাইল থেকে ডিফল্ট এক্সপোর্ট করা calculator অবজেক্টকে ইম্পোর্ট করি।

app.js:

JavaScript

// app.js - calculator.js থেকে ডিফল্ট এক্সপোর্ট ইম্পোর্ট করে ব্যবহার করা

import myCalculator from './calculator.js'; // যেকোনো নাম (myCalculator) দিয়ে ইম্পোর্ট করলাম

console.log("5 + 3 =", myCalculator.add(5, 3));         // আউটপুট: 5 + 3 = 8
console.log("10 - 2 =", myCalculator.subtract(10, 2));   // আউটপুট: 10 - 2 = 8
console.log("4 * 6 =", myCalculator.multiply(4, 6));     // আউটপুট: 4 * 6 = 24
এখানে myCalculator নামটি তোমার পছন্দমতো হতে পারে। তুমি calc, scientificCalculator, অথবা শুধু calculator - যা খুশি দিতে পারো।

উদাহরণ 2: রিয়েল লাইফ হিস্টরি - ইউজার ম্যানেজমেন্ট সিস্টেমের UserAPI.js থেকে ইম্পোর্ট

আমাদের UserAPI.js থেকে ডিফল্ট এক্সপোর্ট করা UserAPI ক্লাসটিকে ইম্পোর্ট করি।

adminPanel.js (অ্যাডমিন প্যানেলের জন্য ফাইল):

JavaScript

// adminPanel.js - UserAPI থেকে ক্লাস ইম্পোর্ট করে ব্যবহারকারীদের ম্যানেজ করা

import UserService from './UserAPI.js'; // UserService নামে ইম্পোর্ট করলাম

const userManager = new UserService(); // ক্লাসের একটি ইনস্ট্যান্স তৈরি করলাম

userManager.addUser("Alice", "alice@example.com");
userManager.addUser("Bob", "bob@example.com");

const user1 = userManager.getUser(1);
console.log("Found user:", user1); // আউটপুট: Found user: { id: 1, name: 'Alice', email: 'alice@example.com' }

console.log("All users:", userManager.getAllUsers());
// আউটপুট: All users: [ { id: 1, name: 'Alice', email: 'alice@example.com' }, { id: 2, name: 'Bob', email: 'bob@example.com' } ]

userManager.deleteUser(1);
console.log("Users after deletion:", userManager.getAllUsers());
// আউটপুট: Users after deletion: [ { id: 2, name: 'Bob', email: 'bob@example.com' } ]
এখানে UserService নামটি আমরা পছন্দমতো দিয়েছি, যা UserAPI ক্লাসকে নির্দেশ করছে।

নেমড এবং ডিফল্ট এক্সপোর্ট একসাথে ব্যবহার করা
হ্যাঁ, একটি মডিউলে তুমি নেমড এবং ডিফল্ট এক্সপোর্ট উভয়ই ব্যবহার করতে পারো। এটি খুবই সাধারণ একটি প্যাটার্ন।

উদাহরণ: একটি ই-কমার্স পণ্যের মডিউল

ধরো, তোমার একটি product.js ফাইল আছে। এই ফাইল থেকে তুমি একটি Product ক্লাসকে ডিফল্ট এক্সপোর্ট করতে চাও (যেহেতু এটিই প্রধান)। এছাড়াও, তুমি কিছু ইউটিলিটি ফাংশন (যেমন, formatCurrency, calculateDiscount) নেমড এক্সপোর্ট করতে চাও।

product.js:

JavaScript

// product.js - Product ক্লাস এবং কিছু ইউটিলিটি ফাংশন

// ডিফল্ট এক্সপোর্ট - Product ক্লাস
class Product {
  constructor(name, price, id) {
    this.name = name;
    this.price = price;
    this.id = id;
  }

  getProductInfo() {
    return `${this.name} (ID: ${this.id}) - Price: ${formatCurrency(this.price)}`;
  }
}

export default Product;

// নেমড এক্সপোর্ট - ইউটিলিটি ফাংশন
export function formatCurrency(amount) {
  return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);
}

export function calculateDiscount(price, discountPercentage) {
  return price * (1 - discountPercentage / 100);
}
store.js (বা যেকোনো অন্য ফাইল যেখানে ইম্পোর্ট করবে):

JavaScript

// store.js - product.js থেকে ইম্পোর্ট করে ব্যবহার করা

import Product, { formatCurrency, calculateDiscount } from './product.js';

const laptop = new Product("Dell XPS 15", 1500, "LPTOP001");
console.log(laptop.getProductInfo());
// আউটপুট: Dell XPS 15 (ID: LPTOP001) - Price: $1,500.00

const discountedPrice = calculateDiscount(100, 10); // 100 ডলারের উপর 10% ছাড়
console.log("Discounted Price:", formatCurrency(discountedPrice));
// আউটপুট: Discounted Price: $90.00
নোট:

ডিফল্ট এক্সপোর্টকে আলাদাভাবে ইম্পোর্ট করা হয় (কোনো {} ব্র্যাকেট ছাড়া)।

নেমড এক্সপোর্টগুলোকে {} ব্র্যাকেটের মধ্যে রেখে ইম্পোর্ট করা হয়।

মডিউল লোডিং এবং ব্রাউজারে ব্যবহার
মডিউল ব্যবহার করার জন্য ব্রাউজারে <script> ট্যাগে type="module" অ্যাট্রিবিউট যোগ করতে হবে।

index.html:

HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JS Modules Example</title>
</head>
<body>
    <h1>JavaScript Modules Demo</h1>

    <script type="module" src="app.js"></script>
</body>
</html>
app.js (তোমার মেইন মডিউল):

JavaScript

// app.js
import { add } from './math.js';

console.log("Using module in browser:", add(20, 25)); // আউটপুট: Using module in browser: 45
কিছু গুরুত্বপূর্ণ বিষয়:

CORS নীতি: মডিউলগুলি ডিফল্টরূপে CORS নীতি মেনে চলে। এর অর্থ হল, তুমি যদি লোকাল ফাইল সিস্টেম থেকে HTML ফাইলটি খোল, তাহলে file:// প্রোটোকলে মডিউল লোডিংয়ে সমস্যা হতে পারে। এর জন্য একটি লোকাল সার্ভার ব্যবহার করা ভালো (যেমন live-server npm প্যাকেজ)।

Defer আচরণ: type="module" অ্যাট্রিবিউট সহ স্ক্রিপ্টগুলি স্বয়ংক্রিয়ভাবে defer অ্যাট্রিবিউটের মতো কাজ করে। অর্থাৎ, HTML পার্সিং শেষ হওয়ার পরে এবং DOMContentLoaded ইভেন্ট ফায়ার হওয়ার আগে মডিউলগুলি লোড এবং এক্সিকিউট হয়।

কখন কোনটি ব্যবহার করবে? (When to use which?)
নেমড এক্সপোর্ট:

যখন একটি মডিউলে একাধিক ফাংশন, ভেরিয়েবল বা ক্লাস থাকে এবং প্রতিটিই স্বাধীনভাবে ব্যবহারযোগ্য।

যখন তুমি চাও যে ব্যবহারকারী নির্দিষ্ট নাম ব্যবহার করে আইটেমগুলো ইম্পোর্ট করুক।

উদাহরণ: ইউটিলিটি লাইব্রেরি (যেমন lodash), ম্যাথ ফাংশন, কনস্ট্যান্টের সংগ্রহ।

ডিফল্ট এক্সপোর্ট:

যখন একটি মডিউলের প্রধান উদ্দেশ্য একটি মাত্র জিনিস (যেমন একটি ক্লাস, একটি অবজেক্ট, বা একটি ফাংশন) এক্সপোর্ট করা।

যখন তুমি চাও যে ইম্পোর্টকারী যেকোনো নাম দিয়ে এটিকে ইম্পোর্ট করতে পারুক।

উদাহরণ: একটি React Component, একটি Express Router, একটি ডেটাবেস কানেকশন ক্লাস।

সাধারণ অভ্যাস:

অনেক ডেভেলপার প্রতিটি ফাইলে একটি ডিফল্ট এক্সপোর্ট এবং প্রয়োজনে কিছু নেমড এক্সপোর্ট ব্যবহার করে। এটি মডিউলগুলোর প্রধান উদ্দেশ্য পরিষ্কার করে এবং অতিরিক্ত ইউটিলিটি ফাংশন সরবরাহ করে।

মাস্টার হওয়ার টিপস!
নিজের হাতে কোড করো: শুধু পড়লে হবে না, প্রতিটা উদাহরণ নিজে কোড করে রান করো। ছোট ছোট ফাইল তৈরি করে এক্সপোর্ট-ইম্পোর্ট চেষ্টা করো।

ভিন্ন ভিন্ন সিনারিও চেষ্টা করো:

একটি মডিউল থেকে দুটি ফাংশন এক্সপোর্ট করো, অন্য মডিউল থেকে একটি ফাংশন ইম্পোর্ট করে ব্যবহার করো।

একটি ডিফল্ট ক্লাস এবং কিছু নেমড কনস্ট্যান্ট এক্সপোর্ট করো।

ইম্পোর্ট করার সময় নাম পরিবর্তন (aliasing) ব্যবহার করো।

ডিপেনডেন্সি চেইন (Dependency Chain): একটি মডিউল অন্য মডিউলকে ইম্পোর্ট করছে, এবং সেই মডিউল আবার অন্য আরেকটিকে ইম্পোর্ট করছে - এই ধরনের চেইন তৈরি করে দেখো।

এরর মেসেজগুলো বুঝো: যখন কিছু ভুল হবে, কনসোলে কী এরর দিচ্ছে তা মনোযোগ দিয়ে পড়ো। এরর মেসেজগুলো তোমার সবচেয়ে ভালো শিক্ষক হতে পারে।

রিয়েল-ওয়ার্ল্ড প্রজেক্ট দেখো: GitHub-এ জনপ্রিয় জাভাস্ক্রিপ্ট লাইব্রেরি বা ফ্রেমওয়ার্কের সোর্স কোড দেখো। তারা কিভাবে মডিউল ব্যবহার করছে তা থেকে অনেক কিছু শিখতে পারবে।

ES Modules বনাম CommonJS: জাভাস্ক্রিপ্ট ইকোসিস্টেমে CommonJS (Node.js-এর জন্য) এবং ES Modules দুটি জনপ্রিয় মডিউল সিস্টেম। যদিও তুমি ES Modules নিয়ে পড়ছো, CommonJS (require/module.exports) সম্পর্কেও কিছুটা জেনে রাখা ভালো, কারণ অনেক পুরোনো Node.js প্রজেক্টে এটি ব্যবহার করা হয়। তবে আধুনিক Node.js এবং ব্রাউজার ডেভেলপমেন্টে ES Modules-ই স্ট্যান্ডার্ড।










